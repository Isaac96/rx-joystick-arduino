#summary Installation and Usage
#labels Featured,Phase-Requirements,Phase-Design

For an example, look at the [Example Example wiki].


= Setup =

This has to be done only once.

== Hardware ==

=== Required components ===

  * [http://arduino.cc/en/Main/Products Arduino], with an USB cable
  Almost all Arduinos are valid, except if the [RCReceiverShield RC Receiver Shield] is used, some small-scale editions won't fit, such as the Mini, Micro or Nano.

  * RC receiver, with the corresponding transmitter and some extension RC connector cables
  With some newer receiver models, it may not work using the Channel output ports, and may only work using a PPM signal port, if provided.
  If you don't have any extension RC connector cables, you can make one by cutting and stripping the cable of an old/broken servo.

  * Optional but recommended: [RCReceiverShield Arduino RC Receiver Shield wiki]
  If not used, you can manually connect the receiver with the Arduino, as done in the [Example Example wiki].

=== Connections ===

You can either choose to use the CHannel ports, or the BATtery (PPM) port of your RC receiver.

The first one requires you to connect all desired channel ports. The second only requires only one cable and will provide all channels available (but is not yet implemented).

First read the next section if you don't use the BAT/PPM port, then read either the *Without RC Receiver Shield* or the *With RC Receiver Shield* section whether or not you have an RC Receiver Shield.

==== Matching the right RC channel header with the right Arduino digital pin / channel on the RC Receiver Shield ====

The amount of channels used, should be 8 or less, and you can even choose to exclude channels in-between on the RC receiver side.
On the Arduino side, all channel numbers have to be contiguous, in order, and start with the first channel.

So, in the case you don't have a RC Receiver Shield, the first "channel" on the Arduino side is digital pin number 2 (D2).

And, if you have a RC Receiver Shield, the first channel on the RC Receiver Shield is Ch1.

_Example:_

   Suppose you have a 10-channel RC receiver, and you want to capture channels 1, 3, 4, 5 and 10.

   Without RC Receiver Shield:
   connect the signal pin of the RC header of channel 1 with D2 on the Arduino, channel 3 with D3, channel 4 with D4, channel 5 with D5 and channel 10 with D6.

   With RC Receiver Shield:
   connect the RC header of channel 1 with Ch1 on the RC Receiver Shield, channel 3 with Ch2, channel 4 with Ch3, channel 5 with Ch4 and channel 10 with Ch5.

==== Without RC Receiver Shield ====

  * Connect the RC receiver with the Arduino using extension RC connector cables:
    # Connect the `ground` of each RC header (one of the extreme pins, usually with a dark coloured wire) with (one of) the Arduino's "ground" pin(s).
    # Connect the `Vcc` of each RC header (middle pin, usually with a red coloured wire) with the Arduino's "5V" pin.
    # If you use the CHannel ports: Connect the `signal` output of each RC header (the other extreme pin, usually with a light coloured wire) with the right Arduino's "D#" (digital) pin, as described in the previous section.
    If you use the BATtery (PPM) port: Connect the `signal` output of the BAT RC header (the other extreme pin, usually with a light coloured wire) with Arduino's "D8" (digital) pin (, this is the Arduino's capture input pin).
  * Make sure all your connections are well-done, so that there can't be any short-circuit.

_Example_:

[http://rx-joystick-arduino.googlecode.com/svn/trunk/Hardware/ConceptTestSetup/setup.png]

[http://rx-joystick-arduino.googlecode.com/svn/trunk/Hardware/ConceptTestSetup/setup_real.jpg]
[http://rx-joystick-arduino.googlecode.com/svn/trunk/Hardware/ConceptTestSetup/setup_real_zoom.jpg]

==== With RC Receiver Shield ====

  * Push the shield on the Arduino.
  * Connect the RC receiver with the RC Receiver Shield using extension RC connector cables, as described in two sections before.
 ` `*Warning*: it is important that you choose to use either the "Ch#" input ports *OR* the "BAT" input port (PPM signal), and correspondingly you have to put the switch to either "CHs/PWM" or "BAT/PPM".

== Software ==

=== Arduino side ===

  * Get the latest [http://arduino.cc/en/Main/Software Arduino software] (your distribution may even have packaged it). This will be used to compile code and flash it on the Arduino's microprocessor.
  * Connect the Arduino with your computer using the USB cable.
  * Open the installed program and load the file "`RC_receiver.ino`" located at "/Software/Arduino/".
  * Click on the upload icon. If all went right, the program should report:
{{{
Upload succeeded.
}}}
  This program code will stay on the Arduino, even if it has been powered off.

=== Computer side ===

Make sure the following dependencies are installed on your computer:
 
  * [http://www.python.org/download/ python]
  * [http://pypi.python.org/pypi/pyserial pyserial]
  * [http://pypi.python.org/pypi/python-uinput python-uinput]
  This last one only works on Linux, in the future a dummy class will be made to print all received controls, if the python `uinput` module is not found.
  * The `serialToJoystick.py` program, located at "/Software/Computer/"


= Usage =

== Hardware ==

  * Power on the RC transmitter.
  * Connect the Arduino with your computer using the USB cable.

== Software ==

  * Execute the `serialToJoystick.py` program with the appropriate command-line arguments (*TODO*), e.g. by running 
{{{
python serialToJoystick.py
}}}
  in that directory.
  If the following message shows up in the terminal, you'll be able to use it (it will show up with the name "`<your joystick name>`") in all games supporting joysticks:
{{{
Created a joystick device named '<your joystick name>'.
}}}
  * Start a game or application that uses this joystick, and enjoy!